{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u05EA\\u05DB\\u05E0\\u05D5\\u05EA\\\\\\u05DC\\u05DE\\u05D9\\u05D3\\u05D4 \\u05DE\\u05E8\\u05D7\\u05D5\\u05E7\\\\node.js\\\\chatApp\\\\chat-react\\\\src\\\\components\\\\login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { setCustomerName, setCustomerMail, setCustomerRoom } from '../Store/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = state => {\n  return {\n    customer: state.customerReducer.customer\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  setCustomerName: name => dispatch(setCustomerName(name)),\n  setCustomerMail: mail => dispatch(setCustomerMail(mail)),\n  setCustomerRoom: room => dispatch(setCustomerRoom(room)) // setConversations: (name) => dispatch(setCustomerName(name))\n\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(_s(function Login(props) {\n  _s();\n\n  const {\n    customer,\n    setCustomerName,\n    setCustomerMail,\n    setCustomerRoom,\n    history\n  } = props; // const [customerName, setCustomerName] = useState('');\n  // const [customerMail, setCustomerMail] = useState('');\n\n  const [customers, setCustomers] = useState([]);\n  const [existCustomer, setExistCustomer] = useState(false);\n  const [loginCustomer, setLoginCustomer] = useState(false);\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\"); //     function login() {\n  //         debugger;\n  //         const customerDetails = {\n  //             \"customerName\": customer.customerName,\n  //             \"customerMail\": customer.customerMail,\n  //             \"customerRoom\": customer.customerRoom\n  //         }\n  //         var requestOptions = {\n  //             method: 'POST',\n  //             headers: myHeaders,\n  //             // body: JSON.stringify(customerDetails),\n  //         };\n  //         fetch(\"http://localhost:3400/getAllCustomers\", requestOptions)\n  //             .then(response => response.json())\n  //             .then(response => {\n  //                 setCustomers([...customers,response]);\n  //                 // setCustomers(response);\n  //                 debugger;\n  //                 customers.map((item, index) => {\n  //                     debugger;\n  //                     if (item.customerMail === customer.customerMail && item.customerName === customer.customerName && item.customerRoom === customer.customerRoom)\n  //                         setLoginCustomer(true);\n  //                     if (item.customerMail === customer.customerMail) {\n  //                         alert(\"this mail has been used\");\n  //                         setExistCustomer(true);\n  //                     }\n  //                     if (item.customerName === customer.customerName) {\n  //                         alert(\"this name has been used\");\n  //                         setExistCustomer(true);\n  //                     }\n  //                     if (item.customerRoom === customer.customerRoom) {\n  //                         alert(\"this room has been used\");\n  //                         setExistCustomer(true);\n  //                     }\n  //                 })\n  //             }) \n  //             .catch(error => console.log('error', error));\n  //             debugger;\n  // if(loginCustomer)\n  // {\n  //     if (customer.customerName === 'Admin') {\n  //         history.push('/Admin')\n  //     }\n  //     else\n  //     history.push('/Customer');\n  // }\n  // debugger;\n  //         if ((!existCustomer) && (customer.customerMail !== '') && (customer.customerName !== '')&& (customer.customerRoom !== '')) {\n  // debugger;\n  //                 var requestOptions2 = {\n  //                     method: 'POST',\n  //                     headers: myHeaders,\n  //                     body: JSON.stringify(customerDetails),\n  //                 };\n  //                 fetch(\"http://localhost:3400/createCustomer\", requestOptions2)\n  //                     .then(response => response.json())\n  //                     .then(() => {\n  //                         history.push('/Customer');\n  //                     })\n  //                     .catch(error => console.log('error', error));\n  //         }\n  //         else {\n  //             alert('these customer details are not allowd!')\n  //         }\n  //     }\n\n  async function login() {\n    debugger;\n    const customerDetails = {\n      \"customerName\": customer.customerName,\n      \"customerMail\": customer.customerMail,\n      \"customerRoom\": customer.customerRoom\n    }; // var requestOptions = {\n    //     method: 'POST',\n    //     headers: myHeaders,\n    //     // body: JSON.stringify(customerDetails),\n    // };\n    // fetch(\"http://localhost:3400/getAllCustomers\", requestOptions)\n    //     .then(response => response.json())\n    //     .then(response => {\n    //         setCustomers(response);\n    //         debugger;\n    //         customers.map((item, index) => {\n    //             if (item.customerMail === customer.customerMail && item.customerName === customer.customerName && item.customerRoom === customer.customerRoom)\n    //                 setLoginCustomer(true);\n    //             if (item.customerMail === customer.customerMail) {\n    //                 alert(\"this mail has been used\");\n    //                 setExistCustomer(true);\n    //             }\n    //             if (item.customerName === customer.customerName) {\n    //                 alert(\"this name has been used\");\n    //                 setExistCustomer(true);\n    //             }\n    //             if (item.customerRoom === customer.customerRoom) {\n    //                 alert(\"this room has been used\");\n    //                 setExistCustomer(true);\n    //             }\n    //         })\n    //     })\n    //     .catch(error => console.log('error', error));\n\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      body: JSON.stringify(customerDetails)\n    };\n    await fetch(\"http://localhost:3400/isLoginCustomer\", requestOptions).then(response => {\n      response.json();\n      if (response == true) setLoginCustomer(true);\n    }).catch(error => console.log('error', error));\n\n    if (loginCustomer) {\n      if (customer.customerName === 'Admin') {\n        history.push('/Admin');\n      } else history.push('/Customer');\n    }\n\n    var requestOptions3 = {\n      method: 'GET',\n      headers: myHeaders,\n      body: JSON.stringify(customerDetails)\n    };\n    await fetch(\"http://localhost:3400/isExistCustomer\", requestOptions3).then(response => {\n      response.json();\n      if (response == true) setExistCustomer(true);\n    }).catch(error => console.log('error', error));\n\n    if (!existCustomer && customer.customerMail !== '' && customer.customerName !== '' && customer.customerRoom !== '') {\n      debugger;\n      var requestOptions2 = {\n        method: 'POST',\n        headers: myHeaders,\n        body: JSON.stringify(customerDetails)\n      };\n      await fetch(\"http://localhost:3400/createCustomer\", requestOptions2).then(response => response.json()).then(() => {\n        history.push('/Customer');\n      }).catch(error => console.log('error', error));\n    } else {\n      alert('these customer details are not allowd!');\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-12\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"loader4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader loader-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader loader-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader loader-3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader loader-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              className: \"form-label\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"name\",\n              onChange: e => setCustomerName(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"exampleInputPassword1\",\n              className: \"form-label\",\n              children: \"Mail\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputPassword1\",\n              onChange: e => setCustomerMail(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"Room Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              id: \"exampleInputPassword1\",\n              onChange: e => setCustomerRoom(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: login,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 9\n  }, this);\n}, \"XYo1CUd2ELsZoLUs1kqs8Tyv8aI=\")));","map":{"version":3,"sources":["D:/תכנות/למידה מרחוק/node.js/chatApp/chat-react/src/components/login.js"],"names":["React","useState","withRouter","connect","setCustomerName","setCustomerMail","setCustomerRoom","mapStateToProps","state","customer","customerReducer","mapDispatchToProps","dispatch","name","mail","room","Login","props","history","customers","setCustomers","existCustomer","setExistCustomer","loginCustomer","setLoginCustomer","myHeaders","Headers","append","login","customerDetails","customerName","customerMail","customerRoom","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","catch","error","console","log","push","requestOptions3","requestOptions2","alert","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n    withRouter\r\n} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { setCustomerName, setCustomerMail, setCustomerRoom } from '../Store/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customerReducer.customer\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setCustomerName: (name) => dispatch(setCustomerName(name)),\r\n    setCustomerMail: (mail) => dispatch(setCustomerMail(mail)),\r\n    setCustomerRoom: (room) => dispatch(setCustomerRoom(room)),\r\n    // setConversations: (name) => dispatch(setCustomerName(name))\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(function Login(props) {\r\n\r\n    const { customer, setCustomerName, setCustomerMail, setCustomerRoom, history } = props\r\n    // const [customerName, setCustomerName] = useState('');\r\n    // const [customerMail, setCustomerMail] = useState('');\r\n    const [customers, setCustomers] = useState([]);\r\n    const [existCustomer, setExistCustomer] = useState(false);\r\n    const [loginCustomer, setLoginCustomer] = useState(false);\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n//     function login() {\r\n//         debugger;\r\n//         const customerDetails = {\r\n//             \"customerName\": customer.customerName,\r\n//             \"customerMail\": customer.customerMail,\r\n//             \"customerRoom\": customer.customerRoom\r\n//         }\r\n\r\n//         var requestOptions = {\r\n//             method: 'POST',\r\n//             headers: myHeaders,\r\n//             // body: JSON.stringify(customerDetails),\r\n//         };\r\n        \r\n//         fetch(\"http://localhost:3400/getAllCustomers\", requestOptions)\r\n//             .then(response => response.json())\r\n//             .then(response => {\r\n//                 setCustomers([...customers,response]);\r\n\r\n//                 // setCustomers(response);\r\n//                 debugger;\r\n//                 customers.map((item, index) => {\r\n//                     debugger;\r\n//                     if (item.customerMail === customer.customerMail && item.customerName === customer.customerName && item.customerRoom === customer.customerRoom)\r\n//                         setLoginCustomer(true);\r\n//                     if (item.customerMail === customer.customerMail) {\r\n//                         alert(\"this mail has been used\");\r\n//                         setExistCustomer(true);\r\n//                     }\r\n//                     if (item.customerName === customer.customerName) {\r\n//                         alert(\"this name has been used\");\r\n//                         setExistCustomer(true);\r\n//                     }\r\n//                     if (item.customerRoom === customer.customerRoom) {\r\n//                         alert(\"this room has been used\");\r\n//                         setExistCustomer(true);\r\n//                     }\r\n//                 })\r\n//             }) \r\n//             .catch(error => console.log('error', error));\r\n\r\n//             debugger;\r\n// if(loginCustomer)\r\n// {\r\n//     if (customer.customerName === 'Admin') {\r\n//         history.push('/Admin')\r\n//     }\r\n//     else\r\n//     history.push('/Customer');\r\n\r\n// }\r\n       \r\n// debugger;\r\n//         if ((!existCustomer) && (customer.customerMail !== '') && (customer.customerName !== '')&& (customer.customerRoom !== '')) {\r\n// debugger;\r\n            \r\n            \r\n//                 var requestOptions2 = {\r\n//                     method: 'POST',\r\n//                     headers: myHeaders,\r\n//                     body: JSON.stringify(customerDetails),\r\n//                 };\r\n\r\n//                 fetch(\"http://localhost:3400/createCustomer\", requestOptions2)\r\n//                     .then(response => response.json())\r\n//                     .then(() => {\r\n//                         history.push('/Customer');\r\n//                     })\r\n//                     .catch(error => console.log('error', error));\r\n\r\n//         }\r\n//         else {\r\n//             alert('these customer details are not allowd!')\r\n//         }\r\n//     }\r\n\r\n\r\nasync function login() {\r\n    debugger;\r\n    const customerDetails = {\r\n        \"customerName\": customer.customerName,\r\n        \"customerMail\": customer.customerMail,\r\n        \"customerRoom\": customer.customerRoom\r\n    }\r\n\r\n    // var requestOptions = {\r\n    //     method: 'POST',\r\n    //     headers: myHeaders,\r\n    //     // body: JSON.stringify(customerDetails),\r\n    // };\r\n\r\n    // fetch(\"http://localhost:3400/getAllCustomers\", requestOptions)\r\n    //     .then(response => response.json())\r\n    //     .then(response => {\r\n    //         setCustomers(response);\r\n    //         debugger;\r\n    //         customers.map((item, index) => {\r\n    //             if (item.customerMail === customer.customerMail && item.customerName === customer.customerName && item.customerRoom === customer.customerRoom)\r\n    //                 setLoginCustomer(true);\r\n    //             if (item.customerMail === customer.customerMail) {\r\n    //                 alert(\"this mail has been used\");\r\n    //                 setExistCustomer(true);\r\n    //             }\r\n    //             if (item.customerName === customer.customerName) {\r\n    //                 alert(\"this name has been used\");\r\n    //                 setExistCustomer(true);\r\n    //             }\r\n    //             if (item.customerRoom === customer.customerRoom) {\r\n    //                 alert(\"this room has been used\");\r\n    //                 setExistCustomer(true);\r\n    //             }\r\n    //         })\r\n    //     })\r\n    //     .catch(error => console.log('error', error));\r\n\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(customerDetails),\r\n    };\r\n\r\n    await fetch(\"http://localhost:3400/isLoginCustomer\", requestOptions)\r\n        .then(response => {\r\n            response.json()\r\n            if (response == true)\r\n                setLoginCustomer(true)\r\n        })\r\n        .catch(error => console.log('error', error));\r\n\r\n\r\n\r\n    if (loginCustomer) {\r\n        if (customer.customerName === 'Admin') {\r\n            history.push('/Admin')\r\n        }\r\n        else\r\n            history.push('/Customer');\r\n\r\n    }\r\n\r\n    var requestOptions3 = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(customerDetails),\r\n    };\r\n\r\n   await fetch(\"http://localhost:3400/isExistCustomer\", requestOptions3)\r\n        .then(response => {\r\n            response.json()\r\n            if (response == true)\r\n                setExistCustomer(true)\r\n        })\r\n        .catch(error => console.log('error', error));\r\n\r\n\r\n\r\n    if ((!existCustomer) && (customer.customerMail !== '') && (customer.customerName !== '') && (customer.customerRoom !== '')) {\r\n        debugger;\r\n\r\n\r\n        var requestOptions2 = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: JSON.stringify(customerDetails),\r\n        };\r\n\r\n      await  fetch(\"http://localhost:3400/createCustomer\", requestOptions2)\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                history.push('/Customer');\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n    }\r\n    else {\r\n        alert('these customer details are not allowd!')\r\n    }\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div id=\"loader4\">\r\n                            <span className=\"loader loader-1\"></span>\r\n                            <span className=\"loader loader-2\"></span>\r\n                            <span className=\"loader loader-3\"></span>\r\n                            <span className=\"loader loader-4\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br /><br />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <form>\r\n                        <h1>Login</h1>\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"name\" onChange={(e) => setCustomerName(e.target.value)} />\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Mail</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"exampleInputPassword1\" onChange={(e) => setCustomerMail(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label className=\"form-label\">Room Number</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"exampleInputPassword1\" onChange={(e) => setCustomerRoom(e.target.value)} />\r\n                        </div>\r\n\r\n                    </form>\r\n                    <button className=\"btn btn-primary\" onClick={login}>Login</button>\r\n\r\n                </div>\r\n\r\n            </div >\r\n\r\n        </div >\r\n\r\n\r\n    )\r\n}))\r\n"]},"metadata":{},"sourceType":"module"}