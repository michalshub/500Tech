[{"D:\\chatApp\\chat-client\\src\\index.js":"1","D:\\chatApp\\chat-client\\src\\reportWebVitals.js":"2","D:\\chatApp\\chat-client\\src\\App.js":"3","D:\\chatApp\\chat-client\\src\\Router.js":"4","D:\\chatApp\\chat-client\\src\\Store\\store.js":"5","D:\\chatApp\\chat-client\\src\\components\\login.js":"6","D:\\chatApp\\chat-client\\src\\components\\customer.js":"7","D:\\chatApp\\chat-client\\src\\components\\support.js":"8","D:\\chatApp\\chat-client\\src\\components\\messages.js":"9","D:\\chatApp\\chat-client\\src\\reducers\\customer.js":"10","D:\\chatApp\\chat-client\\src\\reducers\\messages.js":"11","D:\\chatApp\\chat-client\\src\\Store\\actions.js":"12","D:\\programmingProjects\\500TechReact\\src\\index.js":"13","D:\\programmingProjects\\500TechReact\\src\\App.js":"14","D:\\programmingProjects\\500TechReact\\src\\Grid.js":"15","D:\\programmingProjects\\500TechReact\\src\\store.js":"16","D:\\programmingProjects\\500TechReact\\src\\data.js":"17"},{"size":499,"mtime":1629210991474,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":418,"mtime":1629327070314,"results":"21","hashOfConfig":"19"},{"size":2400,"mtime":1629327158904,"results":"22","hashOfConfig":"19"},{"size":308,"mtime":1629327048842,"results":"23","hashOfConfig":"19"},{"size":6365,"mtime":1629326977110,"results":"24","hashOfConfig":"19"},{"size":7280,"mtime":1629326951106,"results":"25","hashOfConfig":"19"},{"size":9338,"mtime":1629327024307,"results":"26","hashOfConfig":"19"},{"size":13946,"mtime":1629360199530,"results":"27","hashOfConfig":"19"},{"size":757,"mtime":1628705026191,"results":"28","hashOfConfig":"19"},{"size":484,"mtime":1629302478918,"results":"29","hashOfConfig":"19"},{"size":623,"mtime":1629298594976,"results":"30","hashOfConfig":"19"},{"size":623,"mtime":1634288723792,"results":"31","hashOfConfig":"32"},{"size":686,"mtime":1634288702408,"results":"33","hashOfConfig":"32"},{"size":1884,"mtime":1634288692543,"results":"34","hashOfConfig":"32"},{"size":245,"mtime":1634220773036,"results":"35","hashOfConfig":"32"},{"size":86140,"mtime":1634220735463,"results":"36","hashOfConfig":"32"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"163wcjy",{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"17uvex1",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\chatApp\\chat-client\\src\\index.js",[],["78","79"],"D:\\chatApp\\chat-client\\src\\reportWebVitals.js",[],"D:\\chatApp\\chat-client\\src\\App.js",[],"D:\\chatApp\\chat-client\\src\\Router.js",[],"D:\\chatApp\\chat-client\\src\\Store\\store.js",[],"D:\\chatApp\\chat-client\\src\\components\\login.js",["80","81","82"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    withRouter\r\n} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { setCustomerName, setCustomerMail, setCustomerRoom } from '../Store/actions'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customerReducer.customer,\r\n        socket: state.messageReducer.message.socket\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setCustomerName: (name) => dispatch(setCustomerName(name)),\r\n    setCustomerMail: (mail) => dispatch(setCustomerMail(mail)),\r\n    setCustomerRoom: (room) => dispatch(setCustomerRoom(room)),\r\n})\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(function Login(props) {\r\n\r\n    const { customer, socket, setCustomerName, setCustomerMail, setCustomerRoom, history } = props\r\n    const [existCustomer, setExistCustomer] = useState(false);\r\n    const [loginCustomer, setLoginCustomer] = useState(false);\r\n\r\n    let lResponse = false;\r\n    let eResponse = false;\r\n\r\n    let loginCustomerTemp = false;\r\n    let existCustomerTemp = false;\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    const customerDetails = {\r\n        \"customerName\": customer.customerName,\r\n        \"customerMail\": customer.customerMail,\r\n        \"customerRoom\": customer.customerRoom\r\n    }\r\n    useEffect(() => {\r\n        setCustomerName('');\r\n        setCustomerMail('');\r\n        setCustomerRoom('');\r\n    }, [])\r\n\r\n    function login() {\r\n\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: JSON.stringify(customerDetails),\r\n        };\r\n\r\n        fetch(\"http://localhost:3400/isLoginCustomer\", requestOptions)\r\n            .then((response) =>\r\n                response.json()\r\n            )\r\n            .then((response) => {\r\n                lResponse = response;\r\n                if (lResponse.result === true) {\r\n                    loginCustomerTemp = true;\r\n                    setLoginCustomer(true);\r\n                }\r\n\r\n                if (loginCustomerTemp) {\r\n                    socket.emit('login', customer.customerRoom);\r\n\r\n                    if (customer.customerName === 'Admin') {\r\n                        history.push('/Admin')\r\n                    }\r\n                    else\r\n                        history.push('/Customer');\r\n\r\n                }\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n\r\n        var requestOptions3 = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: JSON.stringify(customerDetails),\r\n        };\r\n\r\n        fetch(\"http://localhost:3400/isExistCustomer\", requestOptions3)\r\n            .then((response) => {\r\n                return response.json();\r\n\r\n\r\n            })\r\n            .then((response) => {\r\n                eResponse = response;\r\n\r\n                console.log(response);\r\n                console.log(response);\r\n                if (eResponse.result === true) {\r\n                    existCustomerTemp = true;\r\n                    setExistCustomer(true);\r\n                }\r\n\r\n\r\n                if ((!existCustomerTemp) && (customer.customerMail !== '') && (customer.customerName !== '') && (customer.customerRoom !== '')) {\r\n                    ;\r\n\r\n\r\n                    var requestOptions2 = {\r\n                        method: 'POST',\r\n                        headers: myHeaders,\r\n                        body: JSON.stringify(customerDetails),\r\n                    };\r\n\r\n                    fetch(\"http://localhost:3400/createCustomer\", requestOptions2)\r\n                        .then(response => response.json())\r\n                        .then(() => {\r\n                            history.push('/Customer');\r\n                        })\r\n                        .catch(error => console.log('error', error));\r\n\r\n                }\r\n                else {\r\n                    if (!loginCustomerTemp)\r\n                        alert('these customer details are not allowd!')\r\n                }\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                        <div id=\"loader4\">\r\n                            <span className=\"loader loader-1\"></span>\r\n                            <span className=\"loader loader-2\"></span>\r\n                            <span className=\"loader loader-3\"></span>\r\n                            <span className=\"loader loader-4\"></span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br /><br />\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <form>\r\n                        <h1 style={{ textAlign: \"center\" }}>hi {customer?.customerName},\r\n                            <br />\r\n                            Welcome To Live Chat </h1>                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"name\" className=\"form-label\">Name</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"name\" onChange={(e) => setCustomerName(e.target.value)} />\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"exampleInputPassword1\" className=\"form-label\">Mail</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"exampleInputPassword1\" onChange={(e) => setCustomerMail(e.target.value)} />\r\n                        </div>\r\n\r\n                        <div className=\"mb-3\">\r\n                            <label className=\"form-label\">Room Number</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"exampleInputPassword1\" onChange={(e) => setCustomerRoom(e.target.value)} />\r\n                        </div>\r\n\r\n                    </form>\r\n                    <button className=\"btn btn-primary\" style={{ backgroundColor: \"#0E6C7D\" }} onClick={login}>Login</button>\r\n\r\n                </div>\r\n\r\n            </div >\r\n\r\n        </div >\r\n\r\n\r\n    )\r\n}))\r\n","D:\\chatApp\\chat-client\\src\\components\\customer.js",["83"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    withRouter,\r\n    Link\r\n} from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { format } from \"timeago.js\";\r\nimport './desine.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customerReducer.customer\r\n    };\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(function Customer(props) {\r\n\r\n    const { customer, history } = props\r\n\r\n    const [openChat, setOpenChat] = useState(false);\r\n    const [allConversations, setAllConversations] = useState([]);\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n    };\r\n\r\n    let cusMail = customer.customerMail;\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:3400/getConversationsByCustomerMail/${cusMail}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                ;\r\n                console.log(allConversations);\r\n                setAllConversations(response);\r\n                console.log(allConversations);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n    }, [])\r\n\r\n    function showMessages(conId) {\r\n        history.push(`/messages/${conId}`);\r\n    }\r\n\r\n    function newConversation() {\r\n        ;\r\n\r\n        let conversation = {\r\n            customerName: customer.customerName,\r\n            conversationDate: new Date()\r\n        }\r\n        var requestOptions = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n            body: JSON.stringify(conversation),\r\n        };\r\n\r\n        fetch(\"http://localhost:3400/newConversation\", requestOptions)\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                history.push(`/messages/${response.conversation._id}`)\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: \"center\" }}>hi {customer?.customerName},\r\n                <br />\r\n                Welcome To Live Chat </h1>\r\n            {\r\n                openChat ?\r\n\r\n                    <form className=\"rounded-top\" style={{ backgroundColor: \"white\", boxShadow: \"10px 10px 5px grey\", marginLeft: \"70%\", width: \"25%\", height: \"450px\", border: \"#0E6C7D 2px solid\" }}>\r\n                        <div style={{ backgroundColor: \"#0E6C7D\", height: \"40px\", color: \"white\" }}>\r\n                            <p style={{ display: \"inline-block\" }} className=\"mx-4 mb-4\">Conversations</p>\r\n                            <svg onClick={newConversation} style={{ cursor: \"pointer\", marginLeft: \"30%\", display: \"inline-block\" }} xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" width=\"48\" viewBox=\"0 0 48 48\">\r\n                                <g>\r\n                                    <path id=\"path1\" transform=\"rotate(0,24,24) translate(11,12.625) scale(0.8125,0.8125)  \" fill=\"white\" d=\"M15,4L17,4 17,9 22,9 22,11 17,11 17,16 15,16 15,11 10,11 10,9 15,9z M5,2C3.3459997,2,2,3.346,2,5L2,15C2,16.654,3.3459997,18,5,18L7,18C7.552,18,8,18.447,8,19L8,24.586 14.293,18.293C14.48,18.105,14.735,18,15,18L27,18C28.654,18,30,16.654,30,15L30,5C30,3.346,28.654,2,27,2z M5,0L27,0C29.757,0,32,2.243,32,5L32,15C32,17.757,29.757,20,27,20L15.414,20 7.7069998,27.707001C7.5159998,27.898001 7.2600002,28 7,28 6.8710003,28 6.7410002,27.976 6.6169996,27.924 6.2440004,27.77 6,27.403999 6,27L6,20 5,20C2.243,20,0,17.757,0,15L0,5C0,2.243,2.243,0,5,0z\" />\r\n                                </g>\r\n                            </svg>\r\n                        </div>\r\n\r\n                        {(allConversations.conversations?.length > 0) ?\r\n                            <div style={{ overflow: \"scroll\", height: \"420px\", width: \"300px\" }}>\r\n                                {\r\n                                    allConversations.conversations.map((item, index) => (\r\n                                        <div key={index} className=\"scrollspy-example\" data-bs-spy=\"scroll\">\r\n                                            <div onClick={() => showMessages(item._id)} style={{ cursor: \"pointer\", textAlign: \"center\", borderBottom: \"1px solid black\" }}>\r\n                                                <h6>{item.customerName}</h6>\r\n                                                <p style={{ fontSize: \"12px\" }}>{format(item.conversationDate)}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                            :\r\n                            <>\r\n                                <br />\r\n                                <br />\r\n                                <p>There is no conversations yet, to start - press on the icon above</p>\r\n                                <div class=\"container-fluid\">\r\n                                    <div class=\"container\">\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col-md-12\">\r\n                                                <div class=\"preloader1\">\r\n                                                    <div class=\"loader loader-inner-1\">\r\n                                                        <div class=\"loader loader-inner-2\">\r\n                                                            <div class=\"loader loader-inner-3\">\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n\r\n                    </form>\r\n\r\n                    :\r\n                    <>\r\n                        <div style={{ paddingLeft: \"93%\", paddingTop: \"25%\" }} onClick={() => { setOpenChat(true) }}>\r\n                            <Link to=\"/Customer\">\r\n\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"30\" height=\"30\" fill=\"#0E6C7D\" className=\"bi bi-chat-square-quote\" viewBox=\"0 0 16 16\">\r\n                                    <path d=\"M14 1a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1h-2.5a2 2 0 0 0-1.6.8L8 14.333 6.1 11.8a2 2 0 0 0-1.6-.8H2a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1h12zM2 0a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2.5a1 1 0 0 1 .8.4l1.9 2.533a1 1 0 0 0 1.6 0l1.9-2.533a1 1 0 0 1 .8-.4H14a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\r\n                                    <path d=\"M7.066 4.76A1.665 1.665 0 0 0 4 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112zm4 0A1.665 1.665 0 0 0 8 5.668a1.667 1.667 0 0 0 2.561 1.406c-.131.389-.375.804-.777 1.22a.417.417 0 1 0 .6.58c1.486-1.54 1.293-3.214.682-4.112z\" />\r\n                                </svg>\r\n                            </Link>\r\n                        </div>\r\n                    </>\r\n            }\r\n        </div>\r\n    );\r\n}))","D:\\chatApp\\chat-client\\src\\components\\support.js",["84","85"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    withRouter,\r\n    Link\r\n} from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\nimport { format } from \"timeago.js\";\r\nimport './desine.css';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customerReducer.customer\r\n    };\r\n}\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps)(function Support(props) {\r\n\r\n    const { customer, history } = props\r\n\r\n    const [openConversation, setOpenConversation] = useState(false);\r\n    const [allConversations, setAllConversations] = useState([]);\r\n    const [allCustomers, setAallCustomers] = useState([]);\r\n\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        var requestOptions1 = {\r\n            method: 'POST',\r\n            headers: myHeaders,\r\n        };\r\n        fetch(\"http://localhost:3400/getAllCustomers\", requestOptions1)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                ;\r\n                setAallCustomers(response);\r\n                console.log(allCustomers);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n    }, [])\r\n\r\n    function fetchConversation(cusMail) {\r\n        console.log(cusMail);\r\n        fetch(`http://localhost:3400/getConversationsByCustomerMail/${cusMail}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then((response) => {\r\n                ;\r\n                console.log(allConversations);\r\n                setAllConversations(response);\r\n                console.log(allConversations);\r\n            })\r\n            .then(() => {\r\n                setOpenConversation(true);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n    }\r\n\r\n    function showMessages(conId) {\r\n        history.push(`/messages/${conId}`);\r\n    }\r\n\r\n    function backToCustomers() {\r\n        setOpenConversation(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 style={{ textAlign: \"center\" }}>hi {customer?.customerName},\r\n                <br />\r\n                Welcome To Live Chat </h1>\r\n\r\n            <form className=\"rounded-top\" style={{ marginLeft: \"70%\", width: \"25%\", height: \"450px\", border: \"#0E6C7D 2px solid\" }}>\r\n\r\n                <div style={{ backgroundColor: \"#0E6C7D\", height: \"40px\", color: \"white\" }}>\r\n                    <p style={{ display: \"inline-block\" }} className=\"mx-4 mb-4\">Conversations</p>\r\n                    {openConversation ?\r\n\r\n                        <svg onClick={backToCustomers} style={{ cursor: \"pointer\", display: \"inline-block\", marginLeft: \"30%\" }} xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" width=\"48\" viewBox=\"0 0 48 48\">\r\n                            <g>\r\n                                <path id=\"path1\" transform=\"rotate(0,24,24) translate(11,11.9749998450279) scale(0.8125,0.8125)  \" fill=\"white\" d=\"M25.399994,10.400033L32,16.60005 25.399994,23.000019 25.399994,18.599991 14,18.599991 14,14.800061 25.399994,14.800061z M0,0L22.200012,0 22.200012,11.800058 18.800018,11.800058 18.800018,3.2000146 3.2000122,3.2000146 3.2000122,26.400047 18.800018,26.400047 18.800018,21.400042 22.200012,21.400042 22.200012,29.6 0,29.6z\" />\r\n                            </g>\r\n                        </svg>\r\n                        :\r\n                        <>\r\n                        </>\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    openConversation === false ?\r\n                        <div style={{ overflow: \"scroll\", height: \"420px\", width: \"300px\" }}>\r\n\r\n                            {\r\n                                allCustomers.customers?.length > 0 ?\r\n                                    <>\r\n\r\n                                        {\r\n                                            allCustomers.customers.map((item, index) => (\r\n                                                <div key={index}>\r\n\r\n                                                    <div style={{ cursor: \"pointer\", textAlign: \"center\" }} onClick={() => fetchConversation(item.customerMail)}>\r\n                                                        {item.customerName !== 'Admin' ?\r\n                                                            <div style={{ boxShadow: \"1px 1px 0px #d4d4d4\", }}>\r\n                                                                <h6 >{item.customerName}</h6>\r\n                                                            </div>\r\n                                                            :\r\n                                                            <>\r\n                                                            </>\r\n                                                        }\r\n                                                    </div>\r\n                                                </div>\r\n                                            ))\r\n                                        }\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <p>search for customers</p>\r\n                                        <div class=\"container-fluid\">\r\n                                            <div class=\"container\">\r\n                                                <div class=\"row\">\r\n                                                    <div class=\"col-md-12\">\r\n                                                        <div class=\"preloader1\">\r\n                                                            <div class=\"loader loader-inner-1\">\r\n                                                                <div class=\"loader loader-inner-2\">\r\n                                                                    <div class=\"loader loader-inner-3\">\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                    </>\r\n                            }\r\n                        </div>\r\n                        :\r\n                        <>\r\n                        </>\r\n                }\r\n\r\n                {openConversation === true ?\r\n                    <>\r\n                        {allConversations.conversations?.length > 0 ?\r\n                            <>\r\n\r\n                                {\r\n                                    allConversations.conversations.map((item, index) => (\r\n                                        <div key={index}>\r\n                                            <div style={{ cursor: \"pointer\" }} onClick={() => showMessages(item._id)}>\r\n                                                {item.customerName !== 'Admin' ?\r\n                                                    <div>\r\n                                                        <h6>{item.customerName}</h6>\r\n                                                        <p style={{ fontSize: \"12px\" }}>{format(item.conversationDate)}</p>\r\n                                                    </div>\r\n                                                    :\r\n                                                    <>\r\n                                                    </>\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </>\r\n                            :\r\n                            <>\r\n                                <p>There is no conversations yet.</p>\r\n                                <div class=\"container-fluid\">\r\n                                    <div class=\"container\">\r\n                                        <div class=\"row\">\r\n                                            <div class=\"col-md-12\">\r\n                                                <div class=\"preloader1\">\r\n                                                    <div class=\"loader loader-inner-1\">\r\n                                                        <div class=\"loader loader-inner-2\">\r\n                                                            <div class=\"loader loader-inner-3\">\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    </>\r\n                    :\r\n                    <>\r\n                    </>\r\n                }\r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n    );\r\n}))","D:\\chatApp\\chat-client\\src\\components\\messages.js",["86","87","88"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    withRouter\r\n} from 'react-router-dom';\r\nimport { setAllMessages } from '../Store/actions'\r\nimport { format } from \"timeago.js\";\r\nimport './desine.css';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        customer: state.customerReducer.customer,\r\n        allMessages: state.messageReducer.message.allMessages,\r\n        socket: state.messageReducer.message.socket\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setAllMessages: (data) => dispatch(setAllMessages(data)),\r\n})\r\n\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(function Messages(props) {\r\n    const { customer, allMessages, socket, setAllMessages, history } = props\r\nconst [cuurentRoom,setCuurentRoom]=useState('');\r\n    const [messageTxt, setMessageTxt] = useState('');\r\n    const [messageDt, setMessageDt] = useState('');\r\n\r\n\r\n    const conId = history.location.pathname.split('/')[2];\r\n\r\n    let txt = document.getElementById('messTxt');\r\n\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect');\r\n        fetch(`http://localhost:3400/getMessagesByConversationId/${conId}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(allMessages);\r\n                setAllMessages(response);\r\n                console.log(allMessages);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n\r\n            fetch(`http://localhost:3400/getCustomerRoomByConId/${conId}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(cuurentRoom);\r\n                setCuurentRoom(response);\r\n                console.log(cuurentRoom);\r\n            })\r\n            .catch(error => console.log('error', error));\r\n\r\n        socket.on(\"message\", (event) => {\r\n\r\n            let messagesTemp = { ...window.store.getState().messageReducer.message.allMessages };\r\n            let messagesObject = [...window.store.getState().messageReducer.message.allMessages.messages];\r\n            messagesObject.push(event);\r\n            messagesTemp.messages = [...messagesObject];\r\n            setAllMessages(messagesTemp);\r\n        })\r\n\r\n    }, [])\r\n\r\n    function backToConversations() {\r\n        if (customer.customerName !== 'Admin')\r\n            history.push('/Customer');\r\n        else\r\n            history.push('/Admin');\r\n    }\r\n\r\n    function eventL(event) {\r\n        if (event.code === 'Enter') {\r\n            sendMessage();\r\n            txt.value = '';\r\n        }\r\n    }\r\n\r\n\r\n    function sendMessage() {\r\n        const message = {\r\n            messageText: messageTxt,\r\n            messageDate: messageDt,\r\n            messageWriter: customer.customerName,\r\n            conId: conId,\r\n            customerRoom: cuurentRoom.customerRoom\r\n        }\r\n        socket.emit('sendMessage', message);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <h1 style={{ textAlign: \"center\" }}>hi {customer?.customerName},\r\n                <br />\r\n                Welcome To Live Chat </h1>\r\n            <form className=\"rounded-top\" style={{\r\n                backgroundColor: \"white\", boxShadow: \"5px 5px 2px grey\", border: \"#0E6C7D 2px solid\",\r\n                width: \"300px\", height: \"450px\", marginLeft: \"70%\",\r\n\r\n            }}>\r\n                <div style={{ backgroundColor: \"#0E6C7D\", height: \"40px\", color: \"white\" }}>\r\n                    <p className=\"mx-4 mb-4\" style={{ display: \"inline-block\" }}>Messages</p>\r\n                    <svg onClick={backToConversations} style={{ cursor: \"pointer\", display: \"inline-block\", marginLeft: \"30%\" }} xmlns=\"http://www.w3.org/2000/svg\" height=\"48\" width=\"48\" viewBox=\"0 0 48 48\">\r\n                        <g>\r\n                            <path id=\"path1\" transform=\"rotate(0,24,24) translate(11,11.9749998450279) scale(0.8125,0.8125)  \" fill=\"white\" d=\"M25.399994,10.400033L32,16.60005 25.399994,23.000019 25.399994,18.599991 14,18.599991 14,14.800061 25.399994,14.800061z M0,0L22.200012,0 22.200012,11.800058 18.800018,11.800058 18.800018,3.2000146 3.2000122,3.2000146 3.2000122,26.400047 18.800018,26.400047 18.800018,21.400042 22.200012,21.400042 22.200012,29.6 0,29.6z\" />\r\n                        </g>\r\n                    </svg>\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {allMessages.messages?.length > 0 ?\r\n                    <div style={{ overflow: \"scroll\", height: \"420px\", width: \"300px\" }}>\r\n                        {\r\n\r\n\r\n                            allMessages.messages.map((item, index) => (\r\n                                <div key={index} style={{ padding: \"10px\" }}\r\n                                >\r\n                                    {item.messageWriter !== 'Admin' ?\r\n                                        <div style={{\r\n                                            direction: \"rtl\",\r\n                                        }}  >\r\n                                            <svg style={{ display: \"inline-block\" }} xmlns=\"http://www.w3.org/2000/svg\" height=\"35\" width=\"35\" viewBox=\"0 0 48 48\">\r\n                                                <g>\r\n                                                    <ellipse cy=\"24\" cx=\"24\" ry=\"24\" rx=\"24\" fill=\"#71C5CD\" />\r\n                                                    <path id=\"path1\" transform=\"rotate(0,24,24) translate(11.3380002975464,11) scale(0.8125,0.8125)  \" fill=\"#0E6C7D\" d=\"M8.3560181,18.363037C10.371002,19.880005 12.873993,20.779053 15.584991,20.779053 18.295013,20.779053 20.799011,19.880005 22.813995,18.363037 27.524017,18.955994 31.167999,22.973022 31.167999,27.843994L31.167999,32 0,32 0,27.843994C0,22.973022,3.6459961,18.955994,8.3560181,18.363037z M15.584991,0C20.403992,0 24.311005,3.90802 24.311005,8.7280273 24.311005,13.548035 20.403992,17.454041 15.584991,17.454041 10.765015,17.454041 6.8580017,13.548035 6.8580017,8.7280273 6.8580017,3.90802 10.765015,0 15.584991,0z\" />\r\n                                                </g>\r\n                                            </svg>\r\n                                            <p className=\"rounded-right\" style={{\r\n                                                fontSize: \"15px !important\",\r\n                                                display: \"inline-block\", backgroundColor: \"lightblue\", padding: \"3px\",\r\n                                                background: \"white\",\r\n                                                minWidth: \"fit-content\",\r\n                                                padding: \"10px\",\r\n                                                borderRadius: \"10px\",\r\n                                                order: \"1\",\r\n                                                borderBottomRightRadius: \"0px important\",\r\n                                                boxShadow: \"1px 2px 0px #d4d4d4\",\r\n                                            }}> {item.messageText}</p>\r\n                                            {customer.customerName !== 'Admin' ?\r\n                                                <div>\r\n                                                    <div></div>\r\n                                                    <p style={{ fontSize: \"12px\" }}>me * {format(item.messageDate)}</p>\r\n                                                </div>\r\n                                                :\r\n                                                <p style={{ fontSize: \"12px\" }}>{item.messageWriter} * {format(item.messageDate)}</p>\r\n                                            }\r\n                                        </div>\r\n                                        :\r\n                                        <div style={{\r\n                                            direction: \"ltr\",\r\n                                        }}>\r\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"35\" width=\"35\" viewBox=\"0 0 48 48\">\r\n                                                <g>\r\n                                                    <ellipse cy=\"24\" cx=\"24\" ry=\"24\" rx=\"24\" fill=\"#CBD0D1\" />\r\n                                                    <path id=\"path1\" transform=\"rotate(0,24,24) translate(12.3194996714592,11) scale(0.8125,0.8125)  \" fill=\"#0B8282\" d=\"M14.119012,19.710999L15.833001,21.426003 14.501031,22.758003 15.874993,24.351006 14.057,29.802002 12.182977,24.414001 13.716974,22.738998 12.403009,21.426003z M21.350027,19.526001C25.562977,20.318001,28.752001,24.014,28.752001,28.456001L28.752001,32 0,32 0,28.456001C2.123852E-07,24.052002,3.134032,20.379005,7.2919891,19.546005L14.001031,30.062004z M11.89001,4.2109985C10.994014,4.2089996 9.8640096,4.439003 9.7319906,5.5890045 9.7319906,5.5890045 9.7319906,7.8209991 9.1359823,8.1190033L8.9880331,10.203003 8.3920248,9.6080017 8.6149862,12.436005 9.7319906,12.511002C9.7319906,12.511002 10.030024,18.241005 15.463006,17.125999 15.463006,17.125999 18.067985,16.306999 18.663017,12.511002L19.556997,12.436005 19.78002,9.9049988 19.40801,9.9800034C19.40801,9.9800034,19.184011,7.8209991,18.960989,6.9280014L18.812004,4.7700043C18.812004,4.7700043 17.546989,3.7280045 15.686028,4.6210022 15.686028,4.6210022 13.527033,4.5460052 13.005976,4.3230057 13.005976,4.3230057 12.502985,4.2130051 11.89001,4.2109985z M14.437005,0C16.973991,0 18.738029,1.3460007 18.738029,1.3460007 22.012991,3.951004 20.22698,8.4169998 20.22698,8.4169998 20.970999,8.862999 20.897024,9.2350006 20.897024,9.2350006 20.897024,14.074005 19.556997,13.701004 19.556997,13.701004 18.812004,16.828003 15.910026,18.241005 15.910026,18.241005 10.252986,19.656006 8.8389852,13.776001 8.8389852,13.776001 7.6480067,13.626999 7.4990199,10.873001 7.4990199,10.873001 7.1260345,9.012001 8.1690023,8.2680054 8.1690023,8.2680054 5.934995,3.0579987 9.9550121,1.4950027 9.9550121,1.4950027 11.565974,0.37000275 13.108026,0 14.437005,0z\" />\r\n                                                </g>\r\n                                            </svg>\r\n\r\n\r\n                                            <p style={{\r\n                                                display: \"inline-block\", backgroundColor: \"lightgray\", padding: \"3px\",\r\n                                                background: \"white\",\r\n                                                minWidth: \"fit-content\",\r\n                                                padding: \"10px\",\r\n                                                borderRadius: \"10px\",\r\n                                                order: \"1\",\r\n                                                borderTopLeftRadius: \"0px !important\",\r\n                                                boxShadow: \"-1px 2px 0px #d4d4d4\",\r\n                                            }} className=\"rounded-right\">{item.messageText}</p>\r\n                                            {customer.customerName !== 'Admin' ?\r\n                                                <p style={{ fontSize: \"12px\" }}>support * {format(item.messageDate)}</p>\r\n                                                :\r\n                                                <p style={{ fontSize: \"12px\" }}\r\n                                                >me * {format(item.messageDate)}</p>\r\n                                            }\r\n                                        </div>\r\n                                    }\r\n\r\n\r\n                                </div>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    :\r\n                    <>\r\n                        <p>There is no messages yet, you can be the first!!!</p>\r\n                        <div class=\"container-fluid\">\r\n                            <div class=\"container\">\r\n                                <div class=\"row\">\r\n                                    <div class=\"col-md-12\">\r\n                                        <div class=\"preloader1\">\r\n                                            <div class=\"loader loader-inner-1\">\r\n                                                <div class=\"loader loader-inner-2\">\r\n                                                    <div class=\"loader loader-inner-3\">\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                }\r\n\r\n                <div id=\"inputDiv\" className=\"mx-1 \"\r\n                    style={{\r\n                        display: \"grid\",\r\n                        gridRowStart: \"190\",\r\n                        gridRowEnd: \"190\",\r\n                    }}>\r\n\r\n                    <textarea type=\"text\" id=\"messTxt\" className=\"form-control\" placeholder=\"send a message\"\r\n                        style={{\r\n                            width: \"100%\",\r\n                            height: \"50px\",\r\n                            background: \"#fafafa\",\r\n                            border: \"none\",\r\n                            outline: \"none\",\r\n                            paddingLeft: \"55px\",\r\n                            paddingRight: \"55px\",\r\n                            color: \"#666\",\r\n                            fontWeight: \"400\"\r\n                        }}\r\n                        onKeyDown={eventL}\r\n                        onChange={(e) => {\r\n                            setMessageTxt(e.target.value)\r\n                            let today = new Date();\r\n                            setMessageDt(today)\r\n\r\n                        }} />\r\n                </div>\r\n            </form>\r\n\r\n        </div >\r\n    );\r\n}))","D:\\chatApp\\chat-client\\src\\reducers\\customer.js",["89"],"import { produce } from 'immer';\r\n\r\nconst initialState = {\r\n    customer: {\r\n        customerName: '',\r\n        customerMail: '',\r\n        customerRoom: '',\r\n        conversations: []\r\n    }\r\n};\r\n\r\n\r\nexport default produce((state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CUSTOMER_NAME':\r\n            state.customer.customerName = action.payload;\r\n            break;\r\n        case 'SET_CUSTOMER_MAIL':\r\n            state.customer.customerMail = action.payload;\r\n            break;\r\n        case 'SET_CUSTOMER_ROOM':\r\n            state.customer.customerRoom = action.payload;\r\n            break;\r\n        case 'SET_CONVERSATIONS':\r\n            state.customer.conversations.push(action.payload);\r\n            break;\r\n    }\r\n}, initialState)","D:\\chatApp\\chat-client\\src\\reducers\\messages.js",["90"],"//NOTE\r\nimport { produce } from 'immer';\r\nimport io from 'socket.io-client';\r\n\r\nconst initialState = {\r\n    message: {\r\n        allMessages: [],\r\n        socket: io.connect('http://localhost:3400/', {\r\n            transports: ['websocket']\r\n        }),\r\n    },\r\n     \r\n};\r\n\r\n\r\nexport default produce((state, action) => {\r\n    switch (action.type) {\r\n        case 'SET_ALL_MESSAGES':\r\n            state.message.allMessages = action.payload;\r\n            break;\r\n    }\r\n}, initialState)","D:\\chatApp\\chat-client\\src\\Store\\actions.js",[],"D:\\programmingProjects\\500TechReact\\src\\index.js",[],"D:\\programmingProjects\\500TechReact\\src\\App.js",["91"],"D:\\programmingProjects\\500TechReact\\src\\Grid.js",[],"D:\\programmingProjects\\500TechReact\\src\\store.js",[],"D:\\programmingProjects\\500TechReact\\src\\data.js",["92"],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":23,"column":12,"nodeType":"99","messageId":"100","endLine":23,"endColumn":25},{"ruleId":"97","severity":1,"message":"101","line":24,"column":12,"nodeType":"99","messageId":"100","endLine":24,"endColumn":25},{"ruleId":"102","severity":1,"message":"103","line":43,"column":8,"nodeType":"104","endLine":43,"endColumn":10,"suggestions":"105"},{"ruleId":"102","severity":1,"message":"106","line":43,"column":8,"nodeType":"104","endLine":43,"endColumn":10,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"108","line":4,"column":5,"nodeType":"99","messageId":"100","endLine":4,"endColumn":9},{"ruleId":"102","severity":1,"message":"109","line":48,"column":8,"nodeType":"104","endLine":48,"endColumn":10,"suggestions":"110"},{"ruleId":"102","severity":1,"message":"111","line":73,"column":8,"nodeType":"104","endLine":73,"endColumn":10,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":150,"column":49,"nodeType":"115","messageId":"116","endLine":150,"endColumn":56},{"ruleId":"113","severity":1,"message":"114","line":181,"column":49,"nodeType":"115","messageId":"116","endLine":181,"endColumn":56},{"ruleId":"117","severity":1,"message":"118","line":14,"column":5,"nodeType":"119","messageId":"120","endLine":27,"endColumn":6},{"ruleId":"117","severity":1,"message":"118","line":17,"column":5,"nodeType":"119","messageId":"120","endLine":21,"endColumn":6},{"ruleId":"97","severity":1,"message":"121","line":6,"column":7,"nodeType":"99","messageId":"100","endLine":6,"endColumn":14},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","endLine":2098,"endColumn":5},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'existCustomer' is assigned a value but never used.","Identifier","unusedVar","'loginCustomer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setCustomerMail', 'setCustomerName', and 'setCustomerRoom'. Either include them or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has missing dependencies: 'allConversations', 'cusMail', and 'requestOptions'. Either include them or remove the dependency array.",["128"],"'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'allCustomers' and 'myHeaders'. Either include them or remove the dependency array.",["129"],"React Hook useEffect has missing dependencies: 'allMessages', 'conId', 'cuurentRoom', 'requestOptions', 'setAllMessages', and 'socket'. Either include them or remove the dependency array.",["130"],"no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Trailer' is assigned a value but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [setCustomerMail, setCustomerName, setCustomerRoom]",{"range":"139","text":"140"},"Update the dependencies array to be: [allConversations, cusMail, requestOptions]",{"range":"141","text":"142"},"Update the dependencies array to be: [allCustomers, myHeaders]",{"range":"143","text":"144"},"Update the dependencies array to be: [allMessages, conId, cuurentRoom, requestOptions, setAllMessages, socket]",{"range":"145","text":"146"},[1502,1504],"[setCustomerMail, setCustomerName, setCustomerRoom]",[1264,1266],"[allConversations, cusMail, requestOptions]",[1326,1328],"[allCustomers, myHeaders]",[2489,2491],"[allMessages, conId, cuurentRoom, requestOptions, setAllMessages, socket]"]